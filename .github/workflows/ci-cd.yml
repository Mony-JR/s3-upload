name: Node.js CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: "./"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: yarn install

      - name: Run build
        run: yarn build

      - name: Run tests
        env:
          AWS_REGOIN: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRETKEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          MONGODB_URL: ${{ secrets.MONGODB_URL }}
        run: yarn test

      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: |
            ./build
            ./package.json
            ./yarn.lock

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: ./build

      - name: Prepare Deployment Directories
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: 22
          script: |
            mkdir -p /home/ubuntu/UploadsFile/s3/build
            mkdir -p /home/ubuntu/UploadsFile/s3/build/configs

      - name: Copy files to Server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: 22
          source: "./build/*"
          target: "/home/ubuntu/UploadsFile/s3/build"
          strip_components: 1

      - name: Create .env File
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: 22
          script: |
            echo "NODE_ENV=production" > /home/ubuntu/UploadsFile/s3/build/.env
            echo "PORT=your_port_number" >> /home/ubuntu/UploadsFile/s3/build/configs.env.production
            echo "DATABASE_URL=your_database_url" >> /home/ubuntu/UploadsFile/s3/build/configs.env.production

      - name: Install Dependencies and Restart Application
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: 22
          script: |
                source /home/ubuntu/.nvm/nvm.sh
                source /home/ubuntu/.profile
                cd /home/ubuntu/UploadsFile/s3/build/
    
                yarn install --production
    
                # Debug: List files after installation
                ls -la
    
                # Check if the PM2 process is running
                  set -e

                  SERVICE="s3"
                    # Check if PM2 is online
                    pm2 show $SERVICE > /dev/null 2>&1
                    if [ $? -eq 0 ]; then
                      echo "Application is running. Restarting..."
                      pm2 restart $SERVICE
                    else
                      echo "Application is not running. Starting..."
                      pm2 start build/server.js --name $SERVICE
                    fi
